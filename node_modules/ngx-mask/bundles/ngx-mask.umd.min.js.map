{"version":3,"sources":["ng://ngx-mask/app/ngx-mask/config.ts","node_modules/tslib/tslib.es6.js","ng://ngx-mask/app/ngx-mask/mask-applier.service.ts","ng://ngx-mask/app/ngx-mask/mask.service.ts","ng://ngx-mask/app/ngx-mask/mask.directive.ts","ng://ngx-mask/app/ngx-mask/mask.pipe.ts","ng://ngx-mask/app/ngx-mask/ngx-mask.module.ts"],"names":["config","InjectionToken","NEW_CONFIG","INITIAL_CONFIG","initialConfig","sufix","prefix","clearIfNotMatch","showTemplate","showMaskTyped","dropSpecialCharacters","shownMaskExpression","specialCharacters","patterns","0","pattern","RegExp","9","optional","A","S","d","m","M","H","h","s","withoutValidation","extendStatics","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__assign","assign","t","i","n","arguments","length","prototype","call","apply","this","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","step","op","TypeError","done","value","pop","push","e","__read","o","r","ar","error","MaskApplierService","_config","maskExpression","separator","str","char","decimalChar","precision","x","split","decimals","res","rgx","test","replace","undefined","substr","percentage","Number","getPrecision","Infinity","checkInputPrecision","inputValue","decimalMarker","precisionRegEx","precisionMatch","match","substring","endsWith","_shift","Set","maskSpecialCharacters","maskAvailablePatterns","applyMaskWithPattern","maskAndPattern","_a","mask","customPattern","applyMask","position","cb","cursor","result","multi","slice","inputArray","toString","startsWith","strForSep","includes","indexOf","lastIndexOf","shiftStep","add","inputSymbol","_checkSymbolMask","_findSpecialChar","shift","newPosition","has","find","val","maskSymbol","Injectable","Inject","args","MaskService","document","_elementRef","_renderer","_this","_super","isNumberValue","maskIsShown","onChange","onTouch","_formElement","nativeElement","__extends","__","constructor","create","tslib_1.__extends","showMaskInInput","filter","item","isArray","_removeMask","_removeSufix","_removePrefix","resLen","applyValueChanges","maskedInput","activeElement","clearIfNotMatchFn","Error","formElementProperty","defineProperty","_b","name","setProperty","checkSpecialCharAmount","specialCharactersForRemove","_regExpForRemove","map","join","DOCUMENT","ElementRef","Renderer2","MaskDirective","_maskService","_position","_maskValue","_repeatPatternSymbols","_inputValue","validate","counterOfOpt","key","Mask error","length_1","onInput","el","selectionStart","caretShift","selectionEnd","_code","onBlur","onFocus","keyCode","setSelectionRange","focus","a","code","preventDefault","cursorStart","onPaste","MAX_SAFE_INTEGER","writeValue","__awaiter","_arguments","P","generator","Promise","resolve","reject","fulfilled","rejected","then","String","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","maskExp","reduce","accum","currval","index","_start","_end","repeatNumber","Directive","selector","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","NG_VALIDATORS","Input","HostListener","MaskPipe","transform","Pipe","pure","NgxMaskModule","forRoot","configValue","ngModule","useValue","useFactory","_configFactory","deps","forChild","_configValue","NgModule","exports","declarations","initConfig"],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport interface IConfig {\n    sufix: string;\n    prefix: string;\n    clearIfNotMatch: boolean;\n    showTemplate: boolean;\n    showMaskTyped: boolean;\n    shownMaskExpression: string;\n    dropSpecialCharacters: boolean | string[];\n    specialCharacters: string[];\n    patterns: {\n        [character: string]: {\n            pattern: RegExp;\n            optional?: boolean;\n        };\n    };\n}\n\nexport type optionsConfig = Partial<IConfig>;\nexport const config: InjectionToken<string> = new InjectionToken('config');\nexport const NEW_CONFIG: InjectionToken<string> = new InjectionToken('NEW_CONFIG');\nexport const INITIAL_CONFIG: InjectionToken<IConfig> = new InjectionToken('INITIAL_CONFIG');\n\nexport const initialConfig: IConfig = {\n    sufix: '',\n    prefix: '',\n    clearIfNotMatch: false,\n    showTemplate: false,\n    showMaskTyped: false,\n    dropSpecialCharacters: true,\n    shownMaskExpression: '',\n    // tslint:disable-next-line: quotemark\n    specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\"', \"'\"],\n    patterns: {\n        '0': {\n            pattern: new RegExp('\\\\d')\n        },\n        '9': {\n            pattern: new RegExp('\\\\d'),\n            optional: true\n        },\n        A: {\n            pattern: new RegExp('[a-zA-Z0-9]')\n        },\n        S: {\n            pattern: new RegExp('[a-zA-Z]')\n        },\n        d: {\n            pattern: new RegExp('\\\\d')\n        },\n        m: {\n            pattern: new RegExp('\\\\d')\n        },\n        M: {\n            pattern: new RegExp('\\\\d')\n        },\n        H: {\n            pattern: new RegExp('\\\\d')\n        },\n        h: {\n            pattern: new RegExp('\\\\d')\n        },\n        s: {\n            pattern: new RegExp('\\\\d')\n        }\n    }\n};\n\nexport const withoutValidation: string[] = [\n    'percent',\n    'Hh:m0:s0',\n    'Hh:m0',\n    'Hh',\n    'm0:s0',\n    's0',\n    'm0',\n    'separator',\n    'dot_separator',\n    'comma_separator',\n    'd0/M0/0000',\n    'd0/M0',\n    'd0',\n    'M0'\n];\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\nimport { config, IConfig } from './config';\n\n@Injectable()\nexport class MaskApplierService {\n    public dropSpecialCharacters: IConfig['dropSpecialCharacters'];\n    public showTemplate!: IConfig['showTemplate'];\n    public clearIfNotMatch!: IConfig['clearIfNotMatch'];\n    public maskExpression: string = '';\n    public shownMaskExpression: string = '';\n    public maskSpecialCharacters!: IConfig['specialCharacters'];\n    public maskAvailablePatterns!: IConfig['patterns'];\n    public prefix!: IConfig['prefix'];\n    public sufix!: IConfig['sufix'];\n    public customPattern!: IConfig['patterns'];\n\n    private _shift!: Set<number>;\n\n    public constructor(@Inject(config) protected _config: IConfig) {\n        this._shift = new Set();\n        this.maskSpecialCharacters = this._config!.specialCharacters;\n        this.maskAvailablePatterns = this._config.patterns;\n        this.clearIfNotMatch = this._config.clearIfNotMatch;\n        this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n        this.maskSpecialCharacters = this._config!.specialCharacters;\n        this.maskAvailablePatterns = this._config.patterns;\n        this.prefix = this._config.prefix;\n        this.sufix = this._config.sufix;\n    }\n    // tslint:disable-next-line:no-any\n    public applyMaskWithPattern(inputValue: string, maskAndPattern: [string, IConfig['patterns']]): string {\n        const [mask, customPattern] = maskAndPattern;\n        this.customPattern = customPattern;\n        return this.applyMask(inputValue, mask);\n    }\n    public applyMask(\n        inputValue: string,\n        maskExpression: string,\n        position: number = 0,\n        cb: Function = () => {}\n    ): string {\n        if (inputValue === undefined || inputValue === null || maskExpression === undefined) {\n            return '';\n        }\n        let cursor: number = 0;\n        let result: string = ``;\n        let multi: boolean = false;\n        if (inputValue.slice(0, this.prefix.length) === this.prefix) {\n            inputValue = inputValue.slice(this.prefix.length, inputValue.length);\n        }\n        const inputArray: string[] = inputValue.toString().split('');\n        if (maskExpression === 'percent') {\n            if (inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/]/)) {\n                inputValue = inputValue.substring(0, inputValue.length - 1);\n            }\n            if (this.percentage(inputValue)) {\n                result = inputValue;\n            } else {\n                result = inputValue.substring(0, inputValue.length - 1);\n            }\n        } else if (\n            maskExpression === 'separator' ||\n            maskExpression === 'dot_separator' ||\n            maskExpression.startsWith('dot_separator') ||\n            maskExpression === 'comma_separator' ||\n            maskExpression.startsWith('comma_separator')\n        ) {\n            if (inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-@#!$%^&*()_+|~=`{}\\[\\]:\";<>?\\/]/)) {\n                inputValue = inputValue.substring(0, inputValue.length - 1);\n            }\n            const precision: number = this.getPrecision(maskExpression);\n            let strForSep: string;\n            if (maskExpression.startsWith('dot_separator')) {\n                inputValue =\n                    inputValue.length > 1 && inputValue[0] === '0' && inputValue[1] !== ','\n                        ? inputValue.slice(1, inputValue.length)\n                        : inputValue;\n            }\n            if (maskExpression.startsWith('comma_separator')) {\n                inputValue =\n                    inputValue.length > 1 && inputValue[0] === '0' && inputValue[1] !== '.'\n                        ? inputValue.slice(1, inputValue.length)\n                        : inputValue;\n            }\n            if (maskExpression === 'separator') {\n                if (\n                    inputValue.includes(',') &&\n                    inputValue.endsWith(',') &&\n                    inputValue.indexOf(',') !== inputValue.lastIndexOf(',')\n                ) {\n                    inputValue = inputValue.substring(0, inputValue.length - 1);\n                }\n                if (inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[@#!$%^&*()_+|~=`{}\\[\\]:.\";<>?\\/]/)) {\n                    inputValue = inputValue.substring(0, inputValue.length - 1);\n                }\n                strForSep = inputValue.replace(/\\s/g, '');\n                result = this.separator(strForSep, ' ', '.', precision);\n            } else if (maskExpression === 'dot_separator' || maskExpression.startsWith('dot_separator')) {\n                if (inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[@#!$%^&*()_+|~=`{}\\[\\]:\\s\";<>?\\/]/)) {\n                    inputValue = inputValue.substring(0, inputValue.length - 1);\n                }\n                inputValue = this.checkInputPrecision(inputValue, precision, ',');\n                strForSep = inputValue.replace(/\\./g, '');\n                result = this.separator(strForSep, '.', ',', precision);\n            } else if (maskExpression === 'comma_separator' || maskExpression.startsWith('comma_separator')) {\n                inputValue = this.checkInputPrecision(inputValue, precision, '.');\n                strForSep = inputValue.replace(/\\,/g, '');\n                result = this.separator(strForSep, ',', '.', precision);\n            }\n            position = result.length + 1;\n            cursor = position;\n            const shiftStep: number = /\\*|\\?/g.test(maskExpression.slice(0, cursor)) ? inputArray.length : cursor;\n            this._shift.add(shiftStep + this.prefix.length || 0);\n        } else {\n            for (\n                // tslint:disable-next-line\n                let i: number = 0, inputSymbol: string = inputArray[0];\n                i < inputArray.length;\n                i++, inputSymbol = inputArray[i]\n            ) {\n                if (cursor === maskExpression.length) {\n                    break;\n                }\n                if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '?') {\n                    result += inputSymbol;\n                    cursor += 2;\n                } else if (\n                    maskExpression[cursor + 1] === '*' &&\n                    multi &&\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])\n                ) {\n                    result += inputSymbol;\n                    cursor += 3;\n                    multi = false;\n                } else if (\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor]) &&\n                    maskExpression[cursor + 1] === '*'\n                ) {\n                    result += inputSymbol;\n                    multi = true;\n                } else if (\n                    maskExpression[cursor + 1] === '?' &&\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])\n                ) {\n                    result += inputSymbol;\n                    cursor += 3;\n                } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor])) {\n                    if (maskExpression[cursor] === 'H') {\n                        if (Number(inputSymbol) > 2) {\n                            result += 0;\n                            cursor += 1;\n                            const shiftStep: number = /\\*|\\?/g.test(maskExpression.slice(0, cursor))\n                                ? inputArray.length\n                                : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'h') {\n                        if (result === '2' && Number(inputSymbol) > 3) {\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'm') {\n                        if (Number(inputSymbol) > 5) {\n                            result += 0;\n                            cursor += 1;\n                            const shiftStep: number = /\\*|\\?/g.test(maskExpression.slice(0, cursor))\n                                ? inputArray.length\n                                : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 's') {\n                        if (Number(inputSymbol) > 5) {\n                            result += 0;\n                            cursor += 1;\n                            const shiftStep: number = /\\*|\\?/g.test(maskExpression.slice(0, cursor))\n                                ? inputArray.length\n                                : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'd') {\n                        if (Number(inputSymbol) > 3) {\n                            result += 0;\n                            cursor += 1;\n                            const shiftStep: number = /\\*|\\?/g.test(maskExpression.slice(0, cursor))\n                                ? inputArray.length\n                                : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor - 1] === 'd') {\n                        if (Number(inputValue.slice(cursor - 1, cursor + 1)) > 31) {\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'M') {\n                        if (Number(inputSymbol) > 1) {\n                            result += 0;\n                            cursor += 1;\n                            const shiftStep: number = /\\*|\\?/g.test(maskExpression.slice(0, cursor))\n                                ? inputArray.length\n                                : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor - 1] === 'M') {\n                        if (Number(inputValue.slice(cursor - 1, cursor + 1)) > 12) {\n                            continue;\n                        }\n                    }\n                    result += inputSymbol;\n                    cursor++;\n                } else if (this.maskSpecialCharacters.indexOf(maskExpression[cursor]) !== -1) {\n                    result += maskExpression[cursor];\n                    cursor++;\n                    const shiftStep: number = /\\*|\\?/g.test(maskExpression.slice(0, cursor))\n                        ? inputArray.length\n                        : cursor;\n                    this._shift.add(shiftStep + this.prefix.length || 0);\n                    i--;\n                } else if (\n                    this.maskSpecialCharacters.indexOf(inputSymbol) > -1 &&\n                    this.maskAvailablePatterns[maskExpression[cursor]] &&\n                    this.maskAvailablePatterns[maskExpression[cursor]].optional\n                ) {\n                    cursor++;\n                    i--;\n                } else if (\n                    this.maskExpression[cursor + 1] === '*' &&\n                    this._findSpecialChar(this.maskExpression[cursor + 2]) &&\n                    this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n                    multi\n                ) {\n                    cursor += 3;\n                    result += inputSymbol;\n                }\n            }\n        }\n        if (\n            result.length + 1 === maskExpression.length &&\n            this.maskSpecialCharacters.indexOf(maskExpression[maskExpression.length - 1]) !== -1\n        ) {\n            result += maskExpression[maskExpression.length - 1];\n        }\n\n        let shift: number = 1;\n        let newPosition: number = position + 1;\n\n        while (this._shift.has(newPosition)) {\n            shift++;\n            newPosition++;\n        }\n\n        cb(this._shift.has(position) ? shift : 0);\n        let res: string = `${this.prefix}${result}`;\n        res = this.sufix ? `${this.prefix}${result}${this.sufix}` : `${this.prefix}${result}`;\n        if (result.length === 0) {\n            res = `${this.prefix}${result}`;\n        }\n        return res;\n    }\n    public _findSpecialChar(inputSymbol: string): undefined | string {\n        const symbol: string | undefined = this.maskSpecialCharacters.find((val: string) => val === inputSymbol);\n        return symbol;\n    }\n\n    private _checkSymbolMask(inputSymbol: string, maskSymbol: string): boolean {\n        this.maskAvailablePatterns = this.customPattern ? this.customPattern : this.maskAvailablePatterns;\n        return (\n            this.maskAvailablePatterns[maskSymbol] &&\n            this.maskAvailablePatterns[maskSymbol].pattern &&\n            this.maskAvailablePatterns[maskSymbol].pattern.test(inputSymbol)\n        );\n    }\n\n    private separator = (str: string, char: string, decimalChar: string, precision: number) => {\n        str += '';\n        const x: string[] = str.split(decimalChar);\n        const decimals: string = x.length > 1 ? `${decimalChar}${x[1]}` : '';\n        let res: string = x[0];\n        const rgx: RegExp = /(\\d+)(\\d{3})/;\n        while (rgx.test(res)) {\n            res = res.replace(rgx, '$1' + char + '$2');\n        }\n        if (precision === undefined) {\n            return res + decimals;\n        } else if (precision === 0) {\n            return res;\n        }\n        return res + decimals.substr(0, precision + 1);\n    };\n\n    private percentage = (str: string): boolean => {\n        return Number(str) >= 0 && Number(str) <= 100;\n    };\n\n    private getPrecision = (maskExpression: string): number => {\n        const x: string[] = maskExpression.split('.');\n        if (x.length > 1) {\n            return Number(x[x.length - 1]);\n        }\n        return Infinity;\n    };\n\n    private checkInputPrecision = (inputValue: string, precision: number, decimalMarker: string): string => {\n        if (precision < Infinity) {\n            let precisionRegEx: RegExp;\n\n            if (decimalMarker === '.') {\n                precisionRegEx = new RegExp(`\\\\.\\\\d{${precision}}.*$`);\n            } else {\n                precisionRegEx = new RegExp(`,\\\\d{${precision}}.*$`);\n            }\n\n            const precisionMatch: RegExpMatchArray | null = inputValue.match(precisionRegEx);\n            if (precisionMatch && precisionMatch[0].length - 1 > precision) {\n                inputValue = inputValue.substring(0, inputValue.length - 1);\n            } else if (precision === 0 && inputValue.endsWith(decimalMarker)) {\n                inputValue = inputValue.substring(0, inputValue.length - 1);\n            }\n        }\n        return inputValue;\n    };\n}\n","import { ElementRef, Inject, Injectable, Renderer2 } from '@angular/core';\nimport { config, IConfig } from './config';\nimport { DOCUMENT } from '@angular/common';\nimport { MaskApplierService } from './mask-applier.service';\n\n@Injectable()\nexport class MaskService extends MaskApplierService {\n    public maskExpression: string = '';\n    public isNumberValue: boolean = false;\n    public showMaskTyped: boolean = false;\n    public maskIsShown: string = '';\n    protected _formElement: HTMLInputElement;\n    // tslint:disable-next-line\n    public onChange = (_: any) => {};\n    public onTouch = () => {};\n    public constructor(\n        // tslint:disable-next-line\n        @Inject(DOCUMENT) private document: any,\n        @Inject(config) protected _config: IConfig,\n        private _elementRef: ElementRef,\n        private _renderer: Renderer2\n    ) {\n        super(_config);\n        this._formElement = this._elementRef.nativeElement;\n    }\n\n    public applyMask(\n        inputValue: string,\n        maskExpression: string,\n        position: number = 0,\n        cb: Function = () => {}\n    ): string {\n        this.maskIsShown = this.showMaskTyped ? this.showMaskInInput() : '';\n        if (!inputValue && this.showMaskTyped) {\n            return this.prefix + this.maskIsShown;\n        }\n        const result: string = super.applyMask(inputValue, maskExpression, position, cb);\n        if (/dot_separator\\.\\d{1,}/.test(this.maskExpression) === true && this.dropSpecialCharacters === true) {\n            this.maskSpecialCharacters = this.maskSpecialCharacters.filter((item: string) => item !== ',');\n        }\n        if ('dot_separator' === this.maskExpression && this.dropSpecialCharacters === true) {\n            this.maskSpecialCharacters = this.maskSpecialCharacters.filter((item: string) => item !== ',');\n        }\n        if (/comma_separator\\.\\d{1,}/.test(this.maskExpression) === true && this.dropSpecialCharacters === true) {\n            this.maskSpecialCharacters = this.maskSpecialCharacters.filter((item: string) => item !== '.');\n        }\n        if ('comma_separator' === this.maskExpression && this.dropSpecialCharacters === true) {\n            this.maskSpecialCharacters = this.maskSpecialCharacters.filter((item: string) => item !== '.');\n        }\n        Array.isArray(this.dropSpecialCharacters)\n            ? this.onChange(this._removeMask(this._removeSufix(this._removePrefix(result)), this.dropSpecialCharacters))\n            : this.dropSpecialCharacters === true\n            ? this.onChange(\n                  this.isNumberValue\n                      ? Number(\n                            this._removeMask(this._removeSufix(this._removePrefix(result)), this.maskSpecialCharacters)\n                        )\n                      : this._removeMask(\n                            this._removeSufix(this._removePrefix(result)),\n                            this.maskSpecialCharacters\n                        ).indexOf(',') !== -1\n                      ? this._removeMask(\n                            this._removeSufix(this._removePrefix(result)),\n                            this.maskSpecialCharacters\n                        ).replace(',', '.')\n                      : this._removeMask(this._removeSufix(this._removePrefix(result)), this.maskSpecialCharacters)\n              )\n            : this.onChange(this._removeSufix(this._removePrefix(result)));\n        let ifMaskIsShown: string = '';\n        if (!this.showMaskTyped) {\n            return result;\n        }\n        const resLen: number = result.length;\n        const prefNmask: string = this.prefix + this.maskIsShown;\n        ifMaskIsShown = prefNmask.slice(resLen);\n        return result + ifMaskIsShown;\n    }\n\n    public applyValueChanges(position: number = 0, cb: Function = () => {}): void {\n        const maskedInput: string | number = this.applyMask(this._formElement.value, this.maskExpression, position, cb);\n        this._formElement.value = maskedInput;\n        if (this._formElement === this.document.activeElement) {\n            return;\n        }\n        this.clearIfNotMatchFn();\n    }\n\n    public showMaskInInput(): string {\n        if (this.showMaskTyped && !!this.shownMaskExpression) {\n            if (this.maskExpression.length !== this.shownMaskExpression.length) {\n                throw new Error('Mask expression must match mask placeholder length');\n            } else {\n                return this.shownMaskExpression;\n            }\n        } else if (this.showMaskTyped) {\n            return this.maskExpression.replace(/\\w/g, '_');\n        }\n        return '';\n    }\n\n    public clearIfNotMatchFn(): void {\n        if (this.clearIfNotMatch === true && this.maskExpression.length !== this._formElement.value.length) {\n            this.formElementProperty = ['value', ''];\n            this.applyMask(this._formElement.value, this.maskExpression);\n        }\n    }\n\n    public set formElementProperty([name, value]: [string, string | boolean]) {\n        this._renderer.setProperty(this._formElement, name, value);\n    }\n\n    public checkSpecialCharAmount(mask: string): number {\n        const chars: string[] = mask.split('').filter((item: string) => this._findSpecialChar(item));\n        return chars.length;\n    }\n\n    private _removeMask(value: string, specialCharactersForRemove: string[]): string {\n        return value ? value.replace(this._regExpForRemove(specialCharactersForRemove), '') : value;\n    }\n\n    private _removePrefix(value: string): string {\n        if (!this.prefix) {\n            return value;\n        }\n        return value ? value.replace(this.prefix, '') : value;\n    }\n\n    private _removeSufix(value: string): string {\n        if (!this.sufix) {\n            return value;\n        }\n        return value ? value.replace(this.sufix, '') : value;\n    }\n\n    private _regExpForRemove(specialCharactersForRemove: string[]): RegExp {\n        return new RegExp(specialCharactersForRemove.map((item: string) => `\\\\${item}`).join('|'), 'gi');\n    }\n}\n","import { Directive, forwardRef, HostListener, Inject, Input } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ControlValueAccessor, FormControl, NG_VALIDATORS, NG_VALUE_ACCESSOR, ValidationErrors } from '@angular/forms';\nimport { MaskService } from './mask.service';\nimport { config, IConfig, withoutValidation } from './config';\n\n@Directive({\n    selector: '[mask]',\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => MaskDirective),\n            multi: true\n        },\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef(() => MaskDirective),\n            multi: true\n        },\n        MaskService\n    ]\n})\nexport class MaskDirective implements ControlValueAccessor {\n    private _maskValue!: string;\n    private _inputValue!: string;\n    private _position: number | null = null;\n    // tslint:disable-next-line\n    private _start!: number;\n    private _end!: number;\n    private _code!: string;\n    // tslint:disable-next-line\n    public onChange = (_: any) => {};\n    public onTouch = () => {};\n\n    public constructor(\n        // tslint:disable-next-line\n        @Inject(DOCUMENT) private document: any,\n        private _maskService: MaskService\n    ) {}\n\n    @Input('mask')\n    public set maskExpression(value: string) {\n        this._maskValue = value || '';\n        if (!this._maskValue) {\n            return;\n        }\n        this._maskService.maskExpression = this._repeatPatternSymbols(this._maskValue);\n        this._maskService.formElementProperty = [\n            'value',\n            this._maskService.applyMask(this._inputValue, this._maskService.maskExpression)\n        ];\n    }\n\n    @Input()\n    public set specialCharacters(value: IConfig['specialCharacters']) {\n        if (!value || !Array.isArray(value) || (Array.isArray(value) && !value.length)) {\n            return;\n        }\n        this._maskService.maskSpecialCharacters = value;\n    }\n\n    @Input()\n    public set patterns(value: IConfig['patterns']) {\n        if (!value) {\n            return;\n        }\n        this._maskService.maskAvailablePatterns = value;\n    }\n\n    @Input()\n    public set prefix(value: IConfig['prefix']) {\n        if (!value) {\n            return;\n        }\n        this._maskService.prefix = value;\n    }\n\n    @Input()\n    public set sufix(value: IConfig['sufix']) {\n        if (!value) {\n            return;\n        }\n        this._maskService.sufix = value;\n    }\n\n    @Input()\n    public set dropSpecialCharacters(value: IConfig['dropSpecialCharacters']) {\n        this._maskService.dropSpecialCharacters = value;\n    }\n\n    @Input()\n    public set showMaskTyped(value: IConfig['showMaskTyped']) {\n        if (!value) {\n            return;\n        }\n        this._maskService.showMaskTyped = value;\n    }\n\n    @Input()\n    public set shownMaskExpression(value: IConfig['shownMaskExpression']) {\n        if (!value) {\n            return;\n        }\n        this._maskService.shownMaskExpression = value;\n    }\n\n    @Input()\n    public set showTemplate(value: IConfig['showTemplate']) {\n        this._maskService.showTemplate = value;\n    }\n\n    @Input()\n    public set clearIfNotMatch(value: IConfig['clearIfNotMatch']) {\n        this._maskService.clearIfNotMatch = value;\n    }\n\n    public validate({ value }: FormControl): ValidationErrors | null {\n        if (\n            /dot_separator\\.\\d{1,}/.test(this._maskValue) === true ||\n            /comma_separator\\.\\d{1,}/.test(this._maskValue) === true\n        ) {\n            return null;\n        }\n        if (withoutValidation.includes(this._maskValue)) {\n            return null;\n        }\n        if (this._maskService.clearIfNotMatch) {\n            return null;\n        }\n        if (value && value.toString().length >= 1) {\n            let counterOfOpt: number = 0;\n            for (const key in this._maskService.maskAvailablePatterns) {\n                if (\n                    this._maskService.maskAvailablePatterns[key].optional &&\n                    this._maskService.maskAvailablePatterns[key].optional === true\n                ) {\n                    if (this._maskValue.indexOf(key) !== -1) {\n                        counterOfOpt++;\n                    }\n                    if (this._maskValue.indexOf(key) !== -1 && value.length >= this._maskValue.indexOf(key)) {\n                        return null;\n                    }\n                }\n            }\n            if (this._maskValue.indexOf('*') === 1) {\n                return null;\n            } else if (this._maskValue.indexOf('*') > 1 && value.length < this._maskValue.indexOf('*')) {\n                return { 'Mask error': true };\n            }\n            if (this._maskValue.indexOf('*') === -1) {\n                const length: number =\n                    this._maskValue.length - this._maskService.checkSpecialCharAmount(this._maskValue) - counterOfOpt;\n                if (value.length !== length) {\n                    return { 'Mask error': true };\n                }\n            }\n        }\n        return null;\n    }\n\n    @HostListener('input', ['$event'])\n    public onInput(e: KeyboardEvent): void {\n        const el: HTMLInputElement = e.target as HTMLInputElement;\n        this._inputValue = el.value;\n        if (!this._maskValue) {\n            this.onChange(el.value);\n            return;\n        }\n        const position: number =\n            el.selectionStart === 1\n                ? (el.selectionStart as number) + this._maskService.prefix.length\n                : (el.selectionStart as number);\n        let caretShift: number = 0;\n        this._maskService.applyValueChanges(position, (shift: number) => (caretShift = shift));\n        // only set the selection if the element is active\n        if (this.document.activeElement !== el) {\n            return;\n        }\n        el.selectionStart = el.selectionEnd =\n            this._position !== null\n                ? this._position\n                : position +\n                  // tslint:disable-next-line\n                  (this._code === 'Backspace' ? 0 : caretShift);\n        this._position = null;\n    }\n\n    @HostListener('blur')\n    public onBlur(): void {\n        this._maskService.clearIfNotMatchFn();\n        this.onTouch();\n    }\n\n    @HostListener('click', ['$event'])\n    public onFocus(e: MouseEvent | KeyboardEvent): void {\n        const el: HTMLInputElement = e.target as HTMLInputElement;\n        const posStart: number = 0;\n        const posEnd: number = 0;\n        if (\n            el !== null &&\n            el.selectionStart !== null &&\n            el.selectionStart === el.selectionEnd &&\n            el.selectionStart > this._maskService.prefix.length &&\n            // tslint:disable-next-line\n            (e as any).keyCode !== 38)\n        // ) {\n        //     return;\n        // }\n        if (this._maskService.showMaskTyped) {\n            this._maskService.maskIsShown = this._maskService.showMaskInInput();\n             if (el.setSelectionRange) {\n                    el.focus();\n                    el.setSelectionRange(posStart, posEnd);\n             }\n        }\n        el.value =\n            !el.value || el.value === this._maskService.prefix\n                ? this._maskService.prefix + this._maskService.maskIsShown\n                : el.value;\n        /** fix of cursor position with prefix when mouse click occur */\n        if (((el.selectionStart as number) || (el.selectionEnd as number)) <= this._maskService.prefix.length) {\n            el.selectionStart = this._maskService.prefix.length;\n            return;\n        }\n    }\n\n    @HostListener('keydown', ['$event'])\n    public a(e: KeyboardEvent): void {\n        this._code = e.code;\n        const el: HTMLInputElement = e.target as HTMLInputElement;\n        if (e.keyCode === 38) {\n            e.preventDefault();\n        }\n        if (e.keyCode === 37 || e.keyCode === 8) {\n            if ( e.keyCode === 37 ) {\n                el.selectionStart = el.selectionEnd as number - 1;\n            }\n            if (\n                (el.selectionStart as number) <= this._maskService.prefix.length &&\n                (el.selectionEnd as number) <= this._maskService.prefix.length\n            ) {\n                e.preventDefault();\n            }\n            const cursorStart: number | null = el.selectionStart;\n            this.onFocus(e);\n            if (e.keyCode === 8 && cursorStart === 0 && el.selectionEnd === el.value.length) {\n                this._position = this._maskService.prefix ? this._maskService.prefix.length : 1;\n                this._maskService.applyMask(this._maskService.prefix, this._maskService.maskExpression, this._position);\n            }\n        }\n    }\n\n    @HostListener('paste')\n    public onPaste(): void {\n        this._position = Number.MAX_SAFE_INTEGER;\n    }\n\n    /** It writes the value in the input */\n    public async writeValue(inputValue: string): Promise<void> {\n        if (inputValue === undefined) {\n            inputValue = '';\n        }\n        if (typeof inputValue === 'number') {\n            inputValue = String(inputValue);\n            inputValue = this._maskValue.startsWith('dot_separator') ? inputValue.replace('.', ',') : inputValue;\n            this._maskService.isNumberValue = true;\n        }\n        (inputValue && this._maskService.maskExpression) ||\n        (this._maskService.maskExpression && (this._maskService.prefix || this._maskService.showMaskTyped))\n            ? (this._maskService.formElementProperty = [\n                  'value',\n                  this._maskService.applyMask(inputValue, this._maskService.maskExpression)\n              ])\n            : (this._maskService.formElementProperty = ['value', inputValue]);\n        this._inputValue = inputValue;\n    }\n\n    // tslint:disable-next-line\n    public registerOnChange(fn: any): void {\n        this.onChange = fn;\n        this._maskService.onChange = this.onChange;\n    }\n\n    // tslint:disable-next-line\n    public registerOnTouched(fn: any): void {\n        this.onTouch = fn;\n    }\n\n    /** It disables the input element */\n    public setDisabledState(isDisabled: boolean): void {\n        this._maskService.formElementProperty = ['disabled', isDisabled];\n    }\n\n    private _repeatPatternSymbols(maskExp: string): string {\n        return (\n            (maskExp.match(/{[0-9]+}/) &&\n                maskExp.split('').reduce((accum: string, currval: string, index: number): string => {\n                    this._start = currval === '{' ? index : this._start;\n\n                    if (currval !== '}') {\n                        return this._maskService._findSpecialChar(currval) ? accum + currval : accum;\n                    }\n                    this._end = index;\n                    const repeatNumber: number = Number(maskExp.slice(this._start + 1, this._end));\n                    const repaceWith: string = new Array(repeatNumber + 1).join(maskExp[this._start - 1]);\n                    return accum + repaceWith;\n                }, '')) ||\n            maskExp\n        );\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { MaskApplierService } from './mask-applier.service';\nimport { IConfig } from './config';\n\n@Pipe({\n    name: 'mask',\n    pure: true\n})\nexport class MaskPipe implements PipeTransform {\n    public constructor(private _maskService: MaskApplierService) {}\n\n    public transform(value: string | number, mask: string | [string, IConfig['patterns']]): string {\n        if (!value && typeof value !== 'number') {\n            return '';\n        }\n        if (typeof mask === 'string') {\n            return this._maskService.applyMask(`${value}`, mask);\n        }\n        return this._maskService.applyMaskWithPattern(`${value}`, mask);\n    }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { config, INITIAL_CONFIG, initialConfig, NEW_CONFIG, optionsConfig } from './config';\nimport { MaskApplierService } from './mask-applier.service';\nimport { MaskDirective } from './mask.directive';\nimport { MaskPipe } from './mask.pipe';\n\n@NgModule({\n    providers: [MaskApplierService],\n    exports: [MaskDirective, MaskPipe],\n    declarations: [MaskDirective, MaskPipe]\n})\nexport class NgxMaskModule {\n    public static forRoot(configValue?: optionsConfig): ModuleWithProviders {\n        return {\n            ngModule: NgxMaskModule,\n            providers: [\n                {\n                    provide: NEW_CONFIG,\n                    useValue: configValue\n                },\n                {\n                    provide: INITIAL_CONFIG,\n                    useValue: initialConfig\n                },\n                {\n                    provide: config,\n                    useFactory: _configFactory,\n                    deps: [INITIAL_CONFIG, NEW_CONFIG]\n                }\n            ]\n        };\n    }\n    public static forChild(_configValue?: optionsConfig): ModuleWithProviders {\n        return {\n            ngModule: NgxMaskModule\n        };\n    }\n}\n\n/**\n * @internal\n */\nexport function _configFactory(\n    initConfig: optionsConfig,\n    configValue: optionsConfig | (() => optionsConfig)\n): Function | optionsConfig {\n    return typeof configValue === 'function' ? configValue() : { ...initConfig, ...configValue };\n}\n"]}