{"version":3,"file":"ngx-mask.js.map","sources":["ng://ngx-mask/app/ngx-mask/config.ts","ng://ngx-mask/app/ngx-mask/mask-applier.service.ts","ng://ngx-mask/app/ngx-mask/mask.service.ts","ng://ngx-mask/app/ngx-mask/mask.directive.ts","ng://ngx-mask/app/ngx-mask/mask.pipe.ts","ng://ngx-mask/app/ngx-mask/ngx-mask.module.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport interface IConfig {\n    sufix: string;\n    prefix: string;\n    clearIfNotMatch: boolean;\n    showTemplate: boolean;\n    showMaskTyped: boolean;\n    shownMaskExpression: string;\n    dropSpecialCharacters: boolean | string[];\n    specialCharacters: string[];\n    patterns: {\n        [character: string]: {\n            pattern: RegExp;\n            optional?: boolean;\n        };\n    };\n}\n\nexport type optionsConfig = Partial<IConfig>;\nexport const config: InjectionToken<string> = new InjectionToken('config');\nexport const NEW_CONFIG: InjectionToken<string> = new InjectionToken('NEW_CONFIG');\nexport const INITIAL_CONFIG: InjectionToken<IConfig> = new InjectionToken('INITIAL_CONFIG');\n\nexport const initialConfig: IConfig = {\n    sufix: '',\n    prefix: '',\n    clearIfNotMatch: false,\n    showTemplate: false,\n    showMaskTyped: false,\n    dropSpecialCharacters: true,\n    shownMaskExpression: '',\n    // tslint:disable-next-line: quotemark\n    specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\"', \"'\"],\n    patterns: {\n        '0': {\n            pattern: new RegExp('\\\\d')\n        },\n        '9': {\n            pattern: new RegExp('\\\\d'),\n            optional: true\n        },\n        A: {\n            pattern: new RegExp('[a-zA-Z0-9]')\n        },\n        S: {\n            pattern: new RegExp('[a-zA-Z]')\n        },\n        d: {\n            pattern: new RegExp('\\\\d')\n        },\n        m: {\n            pattern: new RegExp('\\\\d')\n        },\n        M: {\n            pattern: new RegExp('\\\\d')\n        },\n        H: {\n            pattern: new RegExp('\\\\d')\n        },\n        h: {\n            pattern: new RegExp('\\\\d')\n        },\n        s: {\n            pattern: new RegExp('\\\\d')\n        }\n    }\n};\n\nexport const withoutValidation: string[] = [\n    'percent',\n    'Hh:m0:s0',\n    'Hh:m0',\n    'Hh',\n    'm0:s0',\n    's0',\n    'm0',\n    'separator',\n    'dot_separator',\n    'comma_separator',\n    'd0/M0/0000',\n    'd0/M0',\n    'd0',\n    'M0'\n];\n","import { Inject, Injectable } from '@angular/core';\nimport { config, IConfig } from './config';\n\n@Injectable()\nexport class MaskApplierService {\n    public dropSpecialCharacters: IConfig['dropSpecialCharacters'];\n    public showTemplate!: IConfig['showTemplate'];\n    public clearIfNotMatch!: IConfig['clearIfNotMatch'];\n    public maskExpression: string = '';\n    public shownMaskExpression: string = '';\n    public maskSpecialCharacters!: IConfig['specialCharacters'];\n    public maskAvailablePatterns!: IConfig['patterns'];\n    public prefix!: IConfig['prefix'];\n    public sufix!: IConfig['sufix'];\n    public customPattern!: IConfig['patterns'];\n\n    private _shift!: Set<number>;\n\n    public constructor(@Inject(config) protected _config: IConfig) {\n        this._shift = new Set();\n        this.maskSpecialCharacters = this._config!.specialCharacters;\n        this.maskAvailablePatterns = this._config.patterns;\n        this.clearIfNotMatch = this._config.clearIfNotMatch;\n        this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n        this.maskSpecialCharacters = this._config!.specialCharacters;\n        this.maskAvailablePatterns = this._config.patterns;\n        this.prefix = this._config.prefix;\n        this.sufix = this._config.sufix;\n    }\n    // tslint:disable-next-line:no-any\n    public applyMaskWithPattern(inputValue: string, maskAndPattern: [string, IConfig['patterns']]): string {\n        const [mask, customPattern] = maskAndPattern;\n        this.customPattern = customPattern;\n        return this.applyMask(inputValue, mask);\n    }\n    public applyMask(\n        inputValue: string,\n        maskExpression: string,\n        position: number = 0,\n        cb: Function = () => {}\n    ): string {\n        if (inputValue === undefined || inputValue === null || maskExpression === undefined) {\n            return '';\n        }\n        let cursor: number = 0;\n        let result: string = ``;\n        let multi: boolean = false;\n        if (inputValue.slice(0, this.prefix.length) === this.prefix) {\n            inputValue = inputValue.slice(this.prefix.length, inputValue.length);\n        }\n        const inputArray: string[] = inputValue.toString().split('');\n        if (maskExpression === 'percent') {\n            if (inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/]/)) {\n                inputValue = inputValue.substring(0, inputValue.length - 1);\n            }\n            if (this.percentage(inputValue)) {\n                result = inputValue;\n            } else {\n                result = inputValue.substring(0, inputValue.length - 1);\n            }\n        } else if (\n            maskExpression === 'separator' ||\n            maskExpression === 'dot_separator' ||\n            maskExpression.startsWith('dot_separator') ||\n            maskExpression === 'comma_separator' ||\n            maskExpression.startsWith('comma_separator')\n        ) {\n            if (inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-@#!$%^&*()_+|~=`{}\\[\\]:\";<>?\\/]/)) {\n                inputValue = inputValue.substring(0, inputValue.length - 1);\n            }\n            const precision: number = this.getPrecision(maskExpression);\n            let strForSep: string;\n            if (maskExpression.startsWith('dot_separator')) {\n                inputValue =\n                    inputValue.length > 1 && inputValue[0] === '0' && inputValue[1] !== ','\n                        ? inputValue.slice(1, inputValue.length)\n                        : inputValue;\n            }\n            if (maskExpression.startsWith('comma_separator')) {\n                inputValue =\n                    inputValue.length > 1 && inputValue[0] === '0' && inputValue[1] !== '.'\n                        ? inputValue.slice(1, inputValue.length)\n                        : inputValue;\n            }\n            if (maskExpression === 'separator') {\n                if (\n                    inputValue.includes(',') &&\n                    inputValue.endsWith(',') &&\n                    inputValue.indexOf(',') !== inputValue.lastIndexOf(',')\n                ) {\n                    inputValue = inputValue.substring(0, inputValue.length - 1);\n                }\n                if (inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[@#!$%^&*()_+|~=`{}\\[\\]:.\";<>?\\/]/)) {\n                    inputValue = inputValue.substring(0, inputValue.length - 1);\n                }\n                strForSep = inputValue.replace(/\\s/g, '');\n                result = this.separator(strForSep, ' ', '.', precision);\n            } else if (maskExpression === 'dot_separator' || maskExpression.startsWith('dot_separator')) {\n                if (inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[@#!$%^&*()_+|~=`{}\\[\\]:\\s\";<>?\\/]/)) {\n                    inputValue = inputValue.substring(0, inputValue.length - 1);\n                }\n                inputValue = this.checkInputPrecision(inputValue, precision, ',');\n                strForSep = inputValue.replace(/\\./g, '');\n                result = this.separator(strForSep, '.', ',', precision);\n            } else if (maskExpression === 'comma_separator' || maskExpression.startsWith('comma_separator')) {\n                inputValue = this.checkInputPrecision(inputValue, precision, '.');\n                strForSep = inputValue.replace(/\\,/g, '');\n                result = this.separator(strForSep, ',', '.', precision);\n            }\n            position = result.length + 1;\n            cursor = position;\n            const shiftStep: number = /\\*|\\?/g.test(maskExpression.slice(0, cursor)) ? inputArray.length : cursor;\n            this._shift.add(shiftStep + this.prefix.length || 0);\n        } else {\n            for (\n                // tslint:disable-next-line\n                let i: number = 0, inputSymbol: string = inputArray[0];\n                i < inputArray.length;\n                i++, inputSymbol = inputArray[i]\n            ) {\n                if (cursor === maskExpression.length) {\n                    break;\n                }\n                if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '?') {\n                    result += inputSymbol;\n                    cursor += 2;\n                } else if (\n                    maskExpression[cursor + 1] === '*' &&\n                    multi &&\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])\n                ) {\n                    result += inputSymbol;\n                    cursor += 3;\n                    multi = false;\n                } else if (\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor]) &&\n                    maskExpression[cursor + 1] === '*'\n                ) {\n                    result += inputSymbol;\n                    multi = true;\n                } else if (\n                    maskExpression[cursor + 1] === '?' &&\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])\n                ) {\n                    result += inputSymbol;\n                    cursor += 3;\n                } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor])) {\n                    if (maskExpression[cursor] === 'H') {\n                        if (Number(inputSymbol) > 2) {\n                            result += 0;\n                            cursor += 1;\n                            const shiftStep: number = /\\*|\\?/g.test(maskExpression.slice(0, cursor))\n                                ? inputArray.length\n                                : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'h') {\n                        if (result === '2' && Number(inputSymbol) > 3) {\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'm') {\n                        if (Number(inputSymbol) > 5) {\n                            result += 0;\n                            cursor += 1;\n                            const shiftStep: number = /\\*|\\?/g.test(maskExpression.slice(0, cursor))\n                                ? inputArray.length\n                                : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 's') {\n                        if (Number(inputSymbol) > 5) {\n                            result += 0;\n                            cursor += 1;\n                            const shiftStep: number = /\\*|\\?/g.test(maskExpression.slice(0, cursor))\n                                ? inputArray.length\n                                : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'd') {\n                        if (Number(inputSymbol) > 3) {\n                            result += 0;\n                            cursor += 1;\n                            const shiftStep: number = /\\*|\\?/g.test(maskExpression.slice(0, cursor))\n                                ? inputArray.length\n                                : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor - 1] === 'd') {\n                        if (Number(inputValue.slice(cursor - 1, cursor + 1)) > 31) {\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'M') {\n                        if (Number(inputSymbol) > 1) {\n                            result += 0;\n                            cursor += 1;\n                            const shiftStep: number = /\\*|\\?/g.test(maskExpression.slice(0, cursor))\n                                ? inputArray.length\n                                : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor - 1] === 'M') {\n                        if (Number(inputValue.slice(cursor - 1, cursor + 1)) > 12) {\n                            continue;\n                        }\n                    }\n                    result += inputSymbol;\n                    cursor++;\n                } else if (this.maskSpecialCharacters.indexOf(maskExpression[cursor]) !== -1) {\n                    result += maskExpression[cursor];\n                    cursor++;\n                    const shiftStep: number = /\\*|\\?/g.test(maskExpression.slice(0, cursor))\n                        ? inputArray.length\n                        : cursor;\n                    this._shift.add(shiftStep + this.prefix.length || 0);\n                    i--;\n                } else if (\n                    this.maskSpecialCharacters.indexOf(inputSymbol) > -1 &&\n                    this.maskAvailablePatterns[maskExpression[cursor]] &&\n                    this.maskAvailablePatterns[maskExpression[cursor]].optional\n                ) {\n                    cursor++;\n                    i--;\n                } else if (\n                    this.maskExpression[cursor + 1] === '*' &&\n                    this._findSpecialChar(this.maskExpression[cursor + 2]) &&\n                    this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n                    multi\n                ) {\n                    cursor += 3;\n                    result += inputSymbol;\n                }\n            }\n        }\n        if (\n            result.length + 1 === maskExpression.length &&\n            this.maskSpecialCharacters.indexOf(maskExpression[maskExpression.length - 1]) !== -1\n        ) {\n            result += maskExpression[maskExpression.length - 1];\n        }\n\n        let shift: number = 1;\n        let newPosition: number = position + 1;\n\n        while (this._shift.has(newPosition)) {\n            shift++;\n            newPosition++;\n        }\n\n        cb(this._shift.has(position) ? shift : 0);\n        let res: string = `${this.prefix}${result}`;\n        res = this.sufix ? `${this.prefix}${result}${this.sufix}` : `${this.prefix}${result}`;\n        if (result.length === 0) {\n            res = `${this.prefix}${result}`;\n        }\n        return res;\n    }\n    public _findSpecialChar(inputSymbol: string): undefined | string {\n        const symbol: string | undefined = this.maskSpecialCharacters.find((val: string) => val === inputSymbol);\n        return symbol;\n    }\n\n    private _checkSymbolMask(inputSymbol: string, maskSymbol: string): boolean {\n        this.maskAvailablePatterns = this.customPattern ? this.customPattern : this.maskAvailablePatterns;\n        return (\n            this.maskAvailablePatterns[maskSymbol] &&\n            this.maskAvailablePatterns[maskSymbol].pattern &&\n            this.maskAvailablePatterns[maskSymbol].pattern.test(inputSymbol)\n        );\n    }\n\n    private separator = (str: string, char: string, decimalChar: string, precision: number) => {\n        str += '';\n        const x: string[] = str.split(decimalChar);\n        const decimals: string = x.length > 1 ? `${decimalChar}${x[1]}` : '';\n        let res: string = x[0];\n        const rgx: RegExp = /(\\d+)(\\d{3})/;\n        while (rgx.test(res)) {\n            res = res.replace(rgx, '$1' + char + '$2');\n        }\n        if (precision === undefined) {\n            return res + decimals;\n        } else if (precision === 0) {\n            return res;\n        }\n        return res + decimals.substr(0, precision + 1);\n    };\n\n    private percentage = (str: string): boolean => {\n        return Number(str) >= 0 && Number(str) <= 100;\n    };\n\n    private getPrecision = (maskExpression: string): number => {\n        const x: string[] = maskExpression.split('.');\n        if (x.length > 1) {\n            return Number(x[x.length - 1]);\n        }\n        return Infinity;\n    };\n\n    private checkInputPrecision = (inputValue: string, precision: number, decimalMarker: string): string => {\n        if (precision < Infinity) {\n            let precisionRegEx: RegExp;\n\n            if (decimalMarker === '.') {\n                precisionRegEx = new RegExp(`\\\\.\\\\d{${precision}}.*$`);\n            } else {\n                precisionRegEx = new RegExp(`,\\\\d{${precision}}.*$`);\n            }\n\n            const precisionMatch: RegExpMatchArray | null = inputValue.match(precisionRegEx);\n            if (precisionMatch && precisionMatch[0].length - 1 > precision) {\n                inputValue = inputValue.substring(0, inputValue.length - 1);\n            } else if (precision === 0 && inputValue.endsWith(decimalMarker)) {\n                inputValue = inputValue.substring(0, inputValue.length - 1);\n            }\n        }\n        return inputValue;\n    };\n}\n","import { ElementRef, Inject, Injectable, Renderer2 } from '@angular/core';\nimport { config, IConfig } from './config';\nimport { DOCUMENT } from '@angular/common';\nimport { MaskApplierService } from './mask-applier.service';\n\n@Injectable()\nexport class MaskService extends MaskApplierService {\n    public maskExpression: string = '';\n    public isNumberValue: boolean = false;\n    public showMaskTyped: boolean = false;\n    public maskIsShown: string = '';\n    protected _formElement: HTMLInputElement;\n    // tslint:disable-next-line\n    public onChange = (_: any) => {};\n    public onTouch = () => {};\n    public constructor(\n        // tslint:disable-next-line\n        @Inject(DOCUMENT) private document: any,\n        @Inject(config) protected _config: IConfig,\n        private _elementRef: ElementRef,\n        private _renderer: Renderer2\n    ) {\n        super(_config);\n        this._formElement = this._elementRef.nativeElement;\n    }\n\n    public applyMask(\n        inputValue: string,\n        maskExpression: string,\n        position: number = 0,\n        cb: Function = () => {}\n    ): string {\n        this.maskIsShown = this.showMaskTyped ? this.showMaskInInput() : '';\n        if (!inputValue && this.showMaskTyped) {\n            return this.prefix + this.maskIsShown;\n        }\n        const result: string = super.applyMask(inputValue, maskExpression, position, cb);\n        if (/dot_separator\\.\\d{1,}/.test(this.maskExpression) === true && this.dropSpecialCharacters === true) {\n            this.maskSpecialCharacters = this.maskSpecialCharacters.filter((item: string) => item !== ',');\n        }\n        if ('dot_separator' === this.maskExpression && this.dropSpecialCharacters === true) {\n            this.maskSpecialCharacters = this.maskSpecialCharacters.filter((item: string) => item !== ',');\n        }\n        if (/comma_separator\\.\\d{1,}/.test(this.maskExpression) === true && this.dropSpecialCharacters === true) {\n            this.maskSpecialCharacters = this.maskSpecialCharacters.filter((item: string) => item !== '.');\n        }\n        if ('comma_separator' === this.maskExpression && this.dropSpecialCharacters === true) {\n            this.maskSpecialCharacters = this.maskSpecialCharacters.filter((item: string) => item !== '.');\n        }\n        Array.isArray(this.dropSpecialCharacters)\n            ? this.onChange(this._removeMask(this._removeSufix(this._removePrefix(result)), this.dropSpecialCharacters))\n            : this.dropSpecialCharacters === true\n            ? this.onChange(\n                  this.isNumberValue\n                      ? Number(\n                            this._removeMask(this._removeSufix(this._removePrefix(result)), this.maskSpecialCharacters)\n                        )\n                      : this._removeMask(\n                            this._removeSufix(this._removePrefix(result)),\n                            this.maskSpecialCharacters\n                        ).indexOf(',') !== -1\n                      ? this._removeMask(\n                            this._removeSufix(this._removePrefix(result)),\n                            this.maskSpecialCharacters\n                        ).replace(',', '.')\n                      : this._removeMask(this._removeSufix(this._removePrefix(result)), this.maskSpecialCharacters)\n              )\n            : this.onChange(this._removeSufix(this._removePrefix(result)));\n        let ifMaskIsShown: string = '';\n        if (!this.showMaskTyped) {\n            return result;\n        }\n        const resLen: number = result.length;\n        const prefNmask: string = this.prefix + this.maskIsShown;\n        ifMaskIsShown = prefNmask.slice(resLen);\n        return result + ifMaskIsShown;\n    }\n\n    public applyValueChanges(position: number = 0, cb: Function = () => {}): void {\n        const maskedInput: string | number = this.applyMask(this._formElement.value, this.maskExpression, position, cb);\n        this._formElement.value = maskedInput;\n        if (this._formElement === this.document.activeElement) {\n            return;\n        }\n        this.clearIfNotMatchFn();\n    }\n\n    public showMaskInInput(): string {\n        if (this.showMaskTyped && !!this.shownMaskExpression) {\n            if (this.maskExpression.length !== this.shownMaskExpression.length) {\n                throw new Error('Mask expression must match mask placeholder length');\n            } else {\n                return this.shownMaskExpression;\n            }\n        } else if (this.showMaskTyped) {\n            return this.maskExpression.replace(/\\w/g, '_');\n        }\n        return '';\n    }\n\n    public clearIfNotMatchFn(): void {\n        if (this.clearIfNotMatch === true && this.maskExpression.length !== this._formElement.value.length) {\n            this.formElementProperty = ['value', ''];\n            this.applyMask(this._formElement.value, this.maskExpression);\n        }\n    }\n\n    public set formElementProperty([name, value]: [string, string | boolean]) {\n        this._renderer.setProperty(this._formElement, name, value);\n    }\n\n    public checkSpecialCharAmount(mask: string): number {\n        const chars: string[] = mask.split('').filter((item: string) => this._findSpecialChar(item));\n        return chars.length;\n    }\n\n    private _removeMask(value: string, specialCharactersForRemove: string[]): string {\n        return value ? value.replace(this._regExpForRemove(specialCharactersForRemove), '') : value;\n    }\n\n    private _removePrefix(value: string): string {\n        if (!this.prefix) {\n            return value;\n        }\n        return value ? value.replace(this.prefix, '') : value;\n    }\n\n    private _removeSufix(value: string): string {\n        if (!this.sufix) {\n            return value;\n        }\n        return value ? value.replace(this.sufix, '') : value;\n    }\n\n    private _regExpForRemove(specialCharactersForRemove: string[]): RegExp {\n        return new RegExp(specialCharactersForRemove.map((item: string) => `\\\\${item}`).join('|'), 'gi');\n    }\n}\n","import { Directive, forwardRef, HostListener, Inject, Input } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ControlValueAccessor, FormControl, NG_VALIDATORS, NG_VALUE_ACCESSOR, ValidationErrors } from '@angular/forms';\nimport { MaskService } from './mask.service';\nimport { config, IConfig, withoutValidation } from './config';\n\n@Directive({\n    selector: '[mask]',\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => MaskDirective),\n            multi: true\n        },\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef(() => MaskDirective),\n            multi: true\n        },\n        MaskService\n    ]\n})\nexport class MaskDirective implements ControlValueAccessor {\n    private _maskValue!: string;\n    private _inputValue!: string;\n    private _position: number | null = null;\n    // tslint:disable-next-line\n    private _start!: number;\n    private _end!: number;\n    private _code!: string;\n    // tslint:disable-next-line\n    public onChange = (_: any) => {};\n    public onTouch = () => {};\n\n    public constructor(\n        // tslint:disable-next-line\n        @Inject(DOCUMENT) private document: any,\n        private _maskService: MaskService\n    ) {}\n\n    @Input('mask')\n    public set maskExpression(value: string) {\n        this._maskValue = value || '';\n        if (!this._maskValue) {\n            return;\n        }\n        this._maskService.maskExpression = this._repeatPatternSymbols(this._maskValue);\n        this._maskService.formElementProperty = [\n            'value',\n            this._maskService.applyMask(this._inputValue, this._maskService.maskExpression)\n        ];\n    }\n\n    @Input()\n    public set specialCharacters(value: IConfig['specialCharacters']) {\n        if (!value || !Array.isArray(value) || (Array.isArray(value) && !value.length)) {\n            return;\n        }\n        this._maskService.maskSpecialCharacters = value;\n    }\n\n    @Input()\n    public set patterns(value: IConfig['patterns']) {\n        if (!value) {\n            return;\n        }\n        this._maskService.maskAvailablePatterns = value;\n    }\n\n    @Input()\n    public set prefix(value: IConfig['prefix']) {\n        if (!value) {\n            return;\n        }\n        this._maskService.prefix = value;\n    }\n\n    @Input()\n    public set sufix(value: IConfig['sufix']) {\n        if (!value) {\n            return;\n        }\n        this._maskService.sufix = value;\n    }\n\n    @Input()\n    public set dropSpecialCharacters(value: IConfig['dropSpecialCharacters']) {\n        this._maskService.dropSpecialCharacters = value;\n    }\n\n    @Input()\n    public set showMaskTyped(value: IConfig['showMaskTyped']) {\n        if (!value) {\n            return;\n        }\n        this._maskService.showMaskTyped = value;\n    }\n\n    @Input()\n    public set shownMaskExpression(value: IConfig['shownMaskExpression']) {\n        if (!value) {\n            return;\n        }\n        this._maskService.shownMaskExpression = value;\n    }\n\n    @Input()\n    public set showTemplate(value: IConfig['showTemplate']) {\n        this._maskService.showTemplate = value;\n    }\n\n    @Input()\n    public set clearIfNotMatch(value: IConfig['clearIfNotMatch']) {\n        this._maskService.clearIfNotMatch = value;\n    }\n\n    public validate({ value }: FormControl): ValidationErrors | null {\n        if (\n            /dot_separator\\.\\d{1,}/.test(this._maskValue) === true ||\n            /comma_separator\\.\\d{1,}/.test(this._maskValue) === true\n        ) {\n            return null;\n        }\n        if (withoutValidation.includes(this._maskValue)) {\n            return null;\n        }\n        if (this._maskService.clearIfNotMatch) {\n            return null;\n        }\n        if (value && value.toString().length >= 1) {\n            let counterOfOpt: number = 0;\n            for (const key in this._maskService.maskAvailablePatterns) {\n                if (\n                    this._maskService.maskAvailablePatterns[key].optional &&\n                    this._maskService.maskAvailablePatterns[key].optional === true\n                ) {\n                    if (this._maskValue.indexOf(key) !== -1) {\n                        counterOfOpt++;\n                    }\n                    if (this._maskValue.indexOf(key) !== -1 && value.length >= this._maskValue.indexOf(key)) {\n                        return null;\n                    }\n                }\n            }\n            if (this._maskValue.indexOf('*') === 1) {\n                return null;\n            } else if (this._maskValue.indexOf('*') > 1 && value.length < this._maskValue.indexOf('*')) {\n                return { 'Mask error': true };\n            }\n            if (this._maskValue.indexOf('*') === -1) {\n                const length: number =\n                    this._maskValue.length - this._maskService.checkSpecialCharAmount(this._maskValue) - counterOfOpt;\n                if (value.length !== length) {\n                    return { 'Mask error': true };\n                }\n            }\n        }\n        return null;\n    }\n\n    @HostListener('input', ['$event'])\n    public onInput(e: KeyboardEvent): void {\n        const el: HTMLInputElement = e.target as HTMLInputElement;\n        this._inputValue = el.value;\n        if (!this._maskValue) {\n            this.onChange(el.value);\n            return;\n        }\n        const position: number =\n            el.selectionStart === 1\n                ? (el.selectionStart as number) + this._maskService.prefix.length\n                : (el.selectionStart as number);\n        let caretShift: number = 0;\n        this._maskService.applyValueChanges(position, (shift: number) => (caretShift = shift));\n        // only set the selection if the element is active\n        if (this.document.activeElement !== el) {\n            return;\n        }\n        el.selectionStart = el.selectionEnd =\n            this._position !== null\n                ? this._position\n                : position +\n                  // tslint:disable-next-line\n                  (this._code === 'Backspace' ? 0 : caretShift);\n        this._position = null;\n    }\n\n    @HostListener('blur')\n    public onBlur(): void {\n        this._maskService.clearIfNotMatchFn();\n        this.onTouch();\n    }\n\n    @HostListener('click', ['$event'])\n    public onFocus(e: MouseEvent | KeyboardEvent): void {\n        const el: HTMLInputElement = e.target as HTMLInputElement;\n        const posStart: number = 0;\n        const posEnd: number = 0;\n        if (\n            el !== null &&\n            el.selectionStart !== null &&\n            el.selectionStart === el.selectionEnd &&\n            el.selectionStart > this._maskService.prefix.length &&\n            // tslint:disable-next-line\n            (e as any).keyCode !== 38)\n        // ) {\n        //     return;\n        // }\n        if (this._maskService.showMaskTyped) {\n            this._maskService.maskIsShown = this._maskService.showMaskInInput();\n             if (el.setSelectionRange) {\n                    el.focus();\n                    el.setSelectionRange(posStart, posEnd);\n             }\n        }\n        el.value =\n            !el.value || el.value === this._maskService.prefix\n                ? this._maskService.prefix + this._maskService.maskIsShown\n                : el.value;\n        /** fix of cursor position with prefix when mouse click occur */\n        if (((el.selectionStart as number) || (el.selectionEnd as number)) <= this._maskService.prefix.length) {\n            el.selectionStart = this._maskService.prefix.length;\n            return;\n        }\n    }\n\n    @HostListener('keydown', ['$event'])\n    public a(e: KeyboardEvent): void {\n        this._code = e.code;\n        const el: HTMLInputElement = e.target as HTMLInputElement;\n        if (e.keyCode === 38) {\n            e.preventDefault();\n        }\n        if (e.keyCode === 37 || e.keyCode === 8) {\n            if ( e.keyCode === 37 ) {\n                el.selectionStart = el.selectionEnd as number - 1;\n            }\n            if (\n                (el.selectionStart as number) <= this._maskService.prefix.length &&\n                (el.selectionEnd as number) <= this._maskService.prefix.length\n            ) {\n                e.preventDefault();\n            }\n            const cursorStart: number | null = el.selectionStart;\n            this.onFocus(e);\n            if (e.keyCode === 8 && cursorStart === 0 && el.selectionEnd === el.value.length) {\n                this._position = this._maskService.prefix ? this._maskService.prefix.length : 1;\n                this._maskService.applyMask(this._maskService.prefix, this._maskService.maskExpression, this._position);\n            }\n        }\n    }\n\n    @HostListener('paste')\n    public onPaste(): void {\n        this._position = Number.MAX_SAFE_INTEGER;\n    }\n\n    /** It writes the value in the input */\n    public async writeValue(inputValue: string): Promise<void> {\n        if (inputValue === undefined) {\n            inputValue = '';\n        }\n        if (typeof inputValue === 'number') {\n            inputValue = String(inputValue);\n            inputValue = this._maskValue.startsWith('dot_separator') ? inputValue.replace('.', ',') : inputValue;\n            this._maskService.isNumberValue = true;\n        }\n        (inputValue && this._maskService.maskExpression) ||\n        (this._maskService.maskExpression && (this._maskService.prefix || this._maskService.showMaskTyped))\n            ? (this._maskService.formElementProperty = [\n                  'value',\n                  this._maskService.applyMask(inputValue, this._maskService.maskExpression)\n              ])\n            : (this._maskService.formElementProperty = ['value', inputValue]);\n        this._inputValue = inputValue;\n    }\n\n    // tslint:disable-next-line\n    public registerOnChange(fn: any): void {\n        this.onChange = fn;\n        this._maskService.onChange = this.onChange;\n    }\n\n    // tslint:disable-next-line\n    public registerOnTouched(fn: any): void {\n        this.onTouch = fn;\n    }\n\n    /** It disables the input element */\n    public setDisabledState(isDisabled: boolean): void {\n        this._maskService.formElementProperty = ['disabled', isDisabled];\n    }\n\n    private _repeatPatternSymbols(maskExp: string): string {\n        return (\n            (maskExp.match(/{[0-9]+}/) &&\n                maskExp.split('').reduce((accum: string, currval: string, index: number): string => {\n                    this._start = currval === '{' ? index : this._start;\n\n                    if (currval !== '}') {\n                        return this._maskService._findSpecialChar(currval) ? accum + currval : accum;\n                    }\n                    this._end = index;\n                    const repeatNumber: number = Number(maskExp.slice(this._start + 1, this._end));\n                    const repaceWith: string = new Array(repeatNumber + 1).join(maskExp[this._start - 1]);\n                    return accum + repaceWith;\n                }, '')) ||\n            maskExp\n        );\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { MaskApplierService } from './mask-applier.service';\nimport { IConfig } from './config';\n\n@Pipe({\n    name: 'mask',\n    pure: true\n})\nexport class MaskPipe implements PipeTransform {\n    public constructor(private _maskService: MaskApplierService) {}\n\n    public transform(value: string | number, mask: string | [string, IConfig['patterns']]): string {\n        if (!value && typeof value !== 'number') {\n            return '';\n        }\n        if (typeof mask === 'string') {\n            return this._maskService.applyMask(`${value}`, mask);\n        }\n        return this._maskService.applyMaskWithPattern(`${value}`, mask);\n    }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { config, INITIAL_CONFIG, initialConfig, NEW_CONFIG, optionsConfig } from './config';\nimport { MaskApplierService } from './mask-applier.service';\nimport { MaskDirective } from './mask.directive';\nimport { MaskPipe } from './mask.pipe';\n\n@NgModule({\n    providers: [MaskApplierService],\n    exports: [MaskDirective, MaskPipe],\n    declarations: [MaskDirective, MaskPipe]\n})\nexport class NgxMaskModule {\n    public static forRoot(configValue?: optionsConfig): ModuleWithProviders {\n        return {\n            ngModule: NgxMaskModule,\n            providers: [\n                {\n                    provide: NEW_CONFIG,\n                    useValue: configValue\n                },\n                {\n                    provide: INITIAL_CONFIG,\n                    useValue: initialConfig\n                },\n                {\n                    provide: config,\n                    useFactory: _configFactory,\n                    deps: [INITIAL_CONFIG, NEW_CONFIG]\n                }\n            ]\n        };\n    }\n    public static forChild(_configValue?: optionsConfig): ModuleWithProviders {\n        return {\n            ngModule: NgxMaskModule\n        };\n    }\n}\n\n/**\n * @internal\n */\nexport function _configFactory(\n    initConfig: optionsConfig,\n    configValue: optionsConfig | (() => optionsConfig)\n): Function | optionsConfig {\n    return typeof configValue === 'function' ? configValue() : { ...initConfig, ...configValue };\n}\n"],"names":["tslib_1.__extends"],"mappings":"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"}
